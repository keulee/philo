> 과제 조건
1. 철학자는 2명 이상.
2. 철학자는 정해진 시간 안에 먹지 않으면 죽는다.
3. 철학자 한 명이 죽으면 프로그램을 종료한다. (죽는 시간 기준 10ms안에 종료메시지를 보내야 한다.)
4. 철학자는 먹기 위해 포크/젓가락 2개를 집어야 한다.
5. 철학자는 먹고->자고->생각하고를 반복한다.
6. 프로그램 실행 인자는 총 5개 혹은 6개이다.
     ./philo number_of_philosophers time_to_die time_to_eat time_to_sleep [number_of_times_each_philosopher_must_eat]
     ex) ./philo 2(number_of_philosophers) 310(time to die) 100(time to eat) 100(time to sleep) 2(number of times each philosopher must eat)
          - 철학자 수 2명
          - 310ms안에 먹어야 철학자 생존
          - 100ms동안 먹는다
          - 100ms동안 잔다
          - 모든 철학자가 2번 먹으면 프로그램 종료
     ex) ./program 5 800 200 200 7 : 7번 다 먹으면 프로그램 종료
     ex) ./program 4 410 200 200 : 무한 루프
     ex) ./program 2 310 200 100 (10ms 안에 죽는 것 확인)

> usleep()

usleep 함수를 사용하면 일정 시간 동안 코드의 실행을 늦출 수 있습니다.
     #include <unistd.h>
     int usleep(useconds_t microseconds);
usleep 은 마이크로초: 1초 == 1000000마이크로초


> gettimeofday

특정구간의 수행시간 차이를 계산하기 위해 마이크로 단위의 시간 함수 gettimeofday 를 지원합니다.
     #include <sys/time.h>
     int gettimeofday(struct timeval *tv, struct timezone *tz);
tv
- 1970-01-01 00:00:00 +0000 (UTC) 이후 경과된 초(seconds)와 micro초를 저장할 buffer
-   struct timeval { 
        time_t tv_sec; /* seconds */ 
        suseconds_t tv_usec; /* microseconds */ 
    };
tz
- timezone 정보로 값은 무시되며, NULL을 사용함.
- struct timezone {
     int tz_minuteswest; /* minutes west of Greenwich */
     int tz_dsttime; /* type of DST correction */ 
     };

> pthread_create()

 pthread_create는 쓰레드를 생성하는 함수.
     #include <pthread.h>
     int pthread_create(phtread_t *thread, const phtread_attr_t *attr, void *(*start_routine)(void *), void *arg);

thread : 쓰레드 식별자로서 생성된 스레드를 담을 쓰레드의 주소 정도로 생각.
attr : 쓰레드 특성을 지정하기 위해 이용, 대개 NULL 처리. 만약 스레드의 속성을 지정하려고 한다면 pthread_attr_init등의 함수로 초기화 필요.
start_routine : 어떤 로직을 할지 함수 포인터를 매개변수로 받음.
arg : start_routine에 전달할 인자. start_routine에서 이 인자를 변환하여 사용.

